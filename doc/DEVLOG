Suppression de la classe Blackboard
-----------------------------------

(2013-04-27) Blackboard est en réalité un HashMap qui dispose d'une subtilité : ses éléments peuvent expirer dans le temps. Cependant, cette propriété ne semble pas utilisée du tout. Si les tests le confirment je remplacerai Blackboard par une simple HashMap.

(+1h) Bon, en fait seulement deux types de validité existent : "juste cette période" et "permanente". Je pense donc créer un blackboard (en réalité un hashmap) effacé à chaque tour, et par ailleurs une table de paramètres exogènes.

(2013-04-29) Le blackboard a été totalement enlevé et remplacé par deux hashtables et des enums donnant le nom des paramètres endogènes et exogènes.


Réécriture du système de scénario
---------------------------------

(2013-04-27) Il me semble assez logique de sortir au maximum le contrôle des variables exogènes de la simulation elle même. Actuellement, beaucoup d'objets stockent les différents événements du scénario et modifient leurs propres variables exogènes quand ils constatent que le scénario l'ordonne. Je vois plusieurs raisons pour lesquelles il faudrait changer ce système :

- Rendre les paramètre exogènes plus explicites
- Ne pas avoir à réécrire l'inteprétation du scénario pour chaque nouvel agent
- Permettre de rajouter facilement des paramètres exogènes
- Permettre d'autres mode de modification de ces paramètres, ne passant pas par un scénario (une GUI permettant de modifier en live les paramètres de la simu par exemple)

Une classe Scenario est donc créée, qui a pour mission de lire les scénario et d'effectuer les modifications de paramètres exogènes. Elle reste tout à fait extérieure à la simulation et est instanciée par Analyst. Elle prend une classe Circuit en argument. Cette dernière ignore l'existence de Scenario.

(2013-04-28) Problème : l'ajout de nouvelles firmes après des banqueroutes utilise le scénario de FirmsSector. Il faut un moyen de reproduire ce comportement sans utiliser de scénario. Plusieurs possibilités :

- considérer la création comme exogène et réaliser cela au niveau au dessus de Circuit. Dans ce cas il faut créer un mécanisme pour sortir les infos des sociétés en banqueroute jusqu'à ce niveau là, car les société sont recrées à l'identique.
    * contre : plus de travail
    * pour : permet de sortir une anomalie de la simulation : ses éléments ne doivent pas dépendre de la date courante.
    * pour : donne une bonne raison de mettre en place une sortie complète des infos jusqu'à l'extérieur du circuit.

- considérer qu'il s'agit d'une tâche de FirmsSector et réimplementer une forme de scenario "light".
    * pour : plus rapide à faire
    * contre : Structure nouvelle assez bancale à créer.

- modifier le comportement de la simulation pour que la création de firmes ne dépende pas directement des banqueroutes et/ou pour que les firmes nouvelles crées ne soient pas identiques
    * pour : solution théorique plus satisfaisante, permet de rendre la simu indépendante de la date courante
    * contre : nécessite de mettre les réferences de test à la poubelle

(2013-06-02) J'ai choisi la deuxième solution, qui finalement ne me semble pas si mauvaise. J'ai renommé le membre .scenario en .delayedActions, car il n'est plus utilisé que pour cela. Le scénario n'est plus importé à la création, les créations de firmes initiales sont la responsabilité de la classe indépendante Scenario. Le scénario est donc sorti de FirmsSector. Restent encore HouseholdsSector

(2013-06-03) Fini de retirer scenario. Il me reste à mettre en place tous les setters qui permettront à Scenario de modifier de nombreux paramètres de la simu
